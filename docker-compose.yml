services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: comp
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data

  dynamodb:
    image: amazon/dynamodb-local:2.4.0
    command: -jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data
    ports:
      - "9040:8000"
    volumes:
      - dynamodata:/home/dynamodblocal/data

  opensearch:
    image: opensearchproject/opensearch:2.11.1
    environment:
      discovery.type: single-node
      plugins.security.disabled: "true"
    ports:
      - "9200:9200"
      - "9600:9600"
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile:  { soft: 65536, hard: 65536 }
    volumes:
      - osdata:/usr/share/opensearch/data

  api:
    build:
        context: ./api
        dockerfile: Dockerfile
    environment:
      DJANGO_DEBUG: "1"
      CORS_ALLOW_ALL: "1"        
    env_file: .env
    depends_on:
        - postgres
        - redis
        - minio
        - dynamodb
        - opensearch
    ports:
    - "9070:8000"   # host:container
    volumes:
        - ./api:/app
    command: >
        bash -lc "
        python manage.py migrate &&
        python manage.py loaddata initial_data || true &&
        gunicorn comp_api.wsgi:application -c gunicorn.conf.py
        "
        
  worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      - api
      - redis
      - postgres
    volumes:
      - ./api:/app
    command: celery -A comp_api worker -l info

  ai:
    build: ./ai
    container_name: comp-lifesci-saas-local-ts-ai
    environment:
      - API_BASE=http://api:8000
      - EMBED_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - TOP_K=10
    ports:
      - "8001:8001"
    depends_on:
      - api
    restart: unless-stopped

  # --- FIX: run web without needing a Dockerfile ---
  web:
    image: node:20-alpine
    working_dir: /app
    env_file: .env
    depends_on:
      - api
      - ai
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app
    command: sh -c "npm ci || npm i && npm run dev"
    # If your project uses yarn instead of npm, swap:
    # command: sh -c "yarn install --frozen-lockfile || yarn install && yarn dev"

volumes:
  pgdata: {}
  minio: {}
  dynamodata: {}
  osdata: {}
  faissdata: {}
